---
title: "Thoughts and Prayers"
bibliography: references.bib
date: last-modified
date-format: "MMMM D, YYYY <br> HH:mm:ss (UTC Z)"
---

*Here goes my thoughts and frustrations about the tools, the results, or the project in general.*


## Notes on methods

-   [@wang_reprogramming_2019] uses a sliding window approach [@dixon_chromatin_2015] to calculate the obs/exp matrices for the PCA. I will try that next, and work within the `cooler`/`cooltools` framework which has a Python API and is thus more suitable to run in Jupyter Notebooks.
-   `HiCExplorer` use a genome-wide contact-distance-based normalization method (`dist_norm`) to generate *obs/exp* matrices for PCA (similar to [@lieberman-aiden_comprehensive_2009]) that may introduce biases. I don't know why, but it looks more like [@wang_reprogramming_2019] when subtracting the running average \[triangular windows, *Kasper* did this\] from the computed PCs.

## Notes on Quarto

I feel like i have the Markdown/Quarto thing under control, which is pretty nice. It is going to be really cool when actually starting to write the manus (I think).

## Notes on `HiCExplorer`

It feels very old school and unnecessary that I can't just output the `HiCExplorer` commands \[plots\] to the Jupyter display. I *have* to save the plots to *.png*s, which is flooding my `figures` directory. I should probably clean it up.

I have created plots to mimic the [@wang_reprogramming_2019] for the `chr12` as well as `chrX`. They don't compare very well with Wang2019, and the both PC1 and PC2 plot looks like they're highly biased (only intersects 0 one time). PC3 looks more reasonable, but I don't know if it is reasonable at all to use the 3rd PC in stead of the 1st. I guess it means that the compartmentalization is not the most variable feature, and there are some biases that we have to get rid of. That, or the X chromosome is divided only into two compartments in fibroblasts (unlikely).

{{< embed notebooks/01_hicexplorer.ipynb#chrX-50kb-pca >}}

{{< embed notebooks/01_hicexplorer.ipynb#chrX-100kb-pca >}}

### Plotting .cool files with `h5py` and `pyBigWig`

It does not work as I want. To read both the matrix and PC components, it requires an abnormal amount of memory (I don't think it is strictly necessary to load 75 Gb of data into memory to make a 5x8" plot). However, `HicExplorer` advise against merging bins after correction and normalization, but I just don't get that. I see no reason it could mess up the correction. Jupyter Display and, ultimately, my screen resolution makes that binning, so It would be completely fine to just bin the matrices after the fact.

## Notes on Open2C framework

### pairtools

I'm considering to just map the reads again with bwa, mates together to create a pairs file in the first place. Alternatively, I will use `samtools sort | samtools fixmate` to convert them back into a paired-end alignment for inputting into `cooler`. Their own recommendation is to map with `bwa mem` with paired-end mates.

> Ended up mapping them again

### cooler

I've decided that this is a much better tool than HiCExplorer, the overall experience is way better. The Python API makes it optimal for Jupyter Notebooks, in stead of doing shell escapes in every cell. It can plot 10kb bins without any issue.

#### Update: 08-10-2024

It took more than a week to get a valid `.pairs` file and to get that processed into a `.cool` matrix. But now it seems to work pretty smoothly, and I believe it is more customizable. The pairs are split up into .nodups, .dups, and .unmapped pairs, meaning all the reads are still saved. A `dedup.stats` is also generated and visualized with `MultiQC`.

I made these plots of both uncorrected and corrected (ICE) matrices (made with `cooler`)

{{< embed notebooks/02_open2c_framework.ipynb#rep1-ncol3-cooltools-uncorrected >}}

{{< embed notebooks/02_open2c_framework.ipynb#rep1-ncol3-cooltools-corrected >}}

Neither of them really resembles the ones from [@wang_reprogramming_2019], but we have some confidence in our method still. Next step is to do the default compartmentalization analysis from `cooler` as well.

#### Update 10-10-2024

I plotted the `weights` variable below the interaction maps. Maybe it will be useful.

{{< embed  notebooks/02_open2c_framework.ipynb#rep1-matrix-weights >}}

Also, we can plot the coverage divided into cis and all contacts, as well as the cis/total coverage ratio:

{{< embed notebooks/02_open2c_framework.ipynb#full-X-coverage-weights >}}

Finally, before moving on, we can do some visual improvements to the plot (it does not alter the data), with `adaptive coarsegraining` and `interpolating` the matrix. It looks pretty cool:

{{< embed  notebooks/02_open2c_framework.ipynb#chrX_sub_smooth_interpolate >}}