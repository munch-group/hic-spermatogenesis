# %% [markdown]
# ---
# title: "gwf_map_reads"
# author: Søren Jørgensen
# date: 09/10/2024
# execute: false
# ---

# %%
from gwf import *
import glob
import os

#######################################
#
# GWF workflow to map Hi-C reads to pairs with `bwa`.
#
# How to run:
# conda activate gwf
# gwf -f gwf_map_reads.py status
#
#######################################

gwf = Workflow(defaults={'nodes': 1, 'queue':"normal", 'account':"hic-spermatogenesis"})

#
# Define templates
#

def bwa_index(ref_genome):
    """Template for indexing the reference genome with bwa"""
    inputs  = [ref_genome]
    outputs = [f"{ref_genome}.amb", 
               f"{ref_genome}.ann", 
               f"{ref_genome}.bwt", 
               f"{ref_genome}.pac", 
               f"{ref_genome}.sa"]
    options = {'cores':1, 'memory': "5g", 'walltime':"02:00:00"}
    spec = f'''
source $(conda info --base)/etc/profile.d/conda.sh
conda activate hic
bwa index -p {ref_genome} -a bwtsw {ref_genome}
'''
    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)

def sam_index(ref_genome):
    """Creating a Fasta index. `bwa mem` apparently also needs a fasta index generated by samtools"""
    inputs = [ref_genome]
    outputs = [f"{ref_genome}.fai"]
    options = {'cores':1, 'memory':"5g", 'walltime':"00:20:00"}
    spec="""
source $(conda info --base)/etc/profile.d/conda.sh
conda activate hic
samtools faidx {ref_genome}
"""
    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)


def bwa_map(ref_genome, in_fastq, out_bam):
    """
    Template for mapping reads to a reference genome using `bwa` and `samtools`. 
    NB! For Hi-C reads, pairs are mapped individually to avoid heuristics made for standard PE libs. (https://hicexplorer.readthedocs.io/en/latest/content/mES-HiC_analysis.html)
    bwa mem should be able to operate on .gz files directly
    """
    threads = 16
    inputs = [f"{ref_genome}.amb", 
              f"{ref_genome}.ann", 
              f"{ref_genome}.bwt", 
              f"{ref_genome}.pac", 
              f"{ref_genome}.sa", 
              f"{ref_genome}.fai",
              in_fastq]
    outputs = [out_bam]
    options = {'cores':threads, 'memory': "16g", 'walltime':"03:00:00"}
    spec = f"""
source $(conda info --base)/etc/profile.d/conda.sh
conda activate hic
bwa mem -t {threads} -A 1 -B 4 -E 50 -L 0 {ref_genome} {in_fastq} | samtools view -Shb - > {out_bam}
"""
    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)

#############################################
############### Create targets ##############
#############################################

# Index the reference
ref_genome = "../hicdata/Mmul10/ncbi_dataset/data/GCF_003339765.1/GCF_003339765.1_Mmul_10_genomic.fna"
T1 = gwf.target_from_template(f"bwa_index_{os.path.basename(ref_genome)}", bwa_index(ref_genome=ref_genome))
T2 = gwf.target_from_template(f"sam_index_{os.path.basename(ref_genome)}", sam_index(ref_genome=ref_genome))


# Map Hi-C reads 
fastq_folder = "data/links/macaque_fastq/"
fastq_files = glob.glob(os.path.join(fastq_folder, "*.fastq.gz"))

for fastq_file in fastq_files:
    base_name = os.path.basename(fastq_file).split('.')[0]
    out_bam = f"steps/{base_name}.bam"
    gwf.target_from_template(f"bwa_map_{base_name}", bwa_map(ref_genome=ref_genome, in_fastq=fastq_file, out_bam=out_bam))

