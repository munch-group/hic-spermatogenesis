---
title: "Chromatin Compartments and Selection on X"
subtitle: "How Edges of Active Chromatin Align with Selection Regions in Primates"
authors:
  - name: "Søren Jørgensen"
    affiliation: |
      Bioinformatics Research Center (BiRC), \\
      Dept. of Molecular Biology and Genetics, \\
      Aarhus University, Denmark
    roles: writing
    corresponding: true
    email: 201906763@post.au.dk
#  - name: "Kasper Munch"
#    affiliation: |
#      Ass. Prof. Bioinformatics \\
#      Bioinformatics Research Center (BiRC), \\
#      Dept. of Molecular Biology and Genetics, \\
#      Aarhus University, Denmark
#    roles: supervision
degree: MSc. Bioinformatics
keywords:
  - Hi-C
  - Chromatin Compartments
  - Evolutionary pressures
  - Selfish gene drive
abstract: |
  Here, the 3D chromatin architecture of the X chromosome in rhesus macaque (*Macaca mulata*) is investigated in the context of evolutionary pressures and genetic drivers. We redo Hi-C analyses from a 2019 paper on the latest reference genome (*rheMac10* or *Mmul_10*). We compare two Hi-C analysis frameworks, *HiCExplorer* and *cooler/cooltools* (Open2C), on a subset, finding Open2C to be most flexible and intuitive. The ICE method (Iterative Correction and Eigendecomposition) was used to infer conventional and refined A/B compartments for fibroblast and four stages of spermatogenesis. We find that 200 kbp transition-zones between A/B-compartments in both fibroblasts and round spermatids align well with human selective sweeps where meiotic drive can explain the selection (ECH-regions), and with hybrid incompatility in baboons (genus *Papio*). We discuss the biological meaning of these findings, where conserved chromatin features may help to retain non-advantageous alleles, hinting to the role of selfish genetic elements in genome evolution.
plain-language-summary: |
  3D structure of chromatin brings another mystery onto the story of selfish genes, where the edges of A-compartments in macaque align well with regions of positive selection identified in human and hybrid incompatibility in baboons.
key-points:
  - Compare two frameworks for Hi-C analysis, HiCExplorer and Open2C
  - Redo Hi-C analysis of rhesus macaque X chromosomes on the latest reference genome *rheMac10* 
  - Compartment edges align well with extended common haplotypes in human, suggesting a role of selfish genetic elements. 
date: last-modified
---

# Introduction

## Reproducible Research and Quarto

## Sexual reproduction (spermatogenesis, meiosis)

The production of gametes in a sexually reproducing organism is a highly complex process that involves numeruous elements. Spermatogenesis, the process of forming male gametes, involves four stages of differentiation from a germ cell through *spermatogonia*, *pachytene spermatocyte*, and *round spermatids* to *spermatozoa*, or *sperm* [@wang_reprogramming_2019], and it is the very basis of male reproduction. The specialized cell division of meiosis neatly handles the pairing, recombination, and segregation of homologous chromosomes, thereby ensuring proper genetic distribution. Deeply understanding the steps of molecular steps of reproduction and how our genetic material is inherited is essential in biology, bringing insight to areas such as speciation, population diversity, and (male) infertility.


## Selfish genes (and randomness) 

The conventional story of meiosis in gametogenesis is one of random segregation of the sex chromosomes. They split into haploid gametes, where each chromosome has an equal chance of being passed on to a gamete. That seems like a fair game, but what if some genes are cheating the system by making others less viable. A meiotic driver is a selfish gene element that modulates meiosis and preferentially transmits its own allele through meiosis, regardless of the downstream fitness effects it may have (good or bad) on the organism it is part of. This phenomenon challenges the traditional understanding of selection, extending its scope beyond the fitness effects on an organism to include selective pressures at the molecular level. 
For example, if some genes on the X chromosome create a disadvantage for gametes that *do not* contain those genes, making sure the Y chromosome is not as viable as the X, resulting in a sex imbalance and possibly numerous other downstream effects. That is exactly what is coined *sex chromosome meiotic drive* [@jaenike_sex_2001], a result of selfish genetic elements. 

Motivated by previous results in the Munch Research group [@munch_group_2024] on hybrid incompatibility and extended common haplotypes [@skov_extraordinary_2023; @sorensen_genome_wide_2023] that could be explained by meiotic drive, we wanted to investigate how these patterns correlate with chromatin compartments. 

## Our Organism of Interest, Wang et al., and the references

## Extended Common Haplotypes Discovered in Humans

## 3C: Chromatin Conformation Capture

## Hi-C: High-Throughput 3C

Our DNA can be divided into different orders of structure. *3C* focus on identifying the highest orders of organization inside the nucleus, that is, when the 30 nm thick coil of chromatin fibers folds into loops, Topologically Associating Domains (TADs), and chromatin compartments. Here, we narrow our focus on the largest of the structures, *compartments*, that is known to determine availability to transcription factors, thus making an *A* compartment *active*---and the *B* compartment *inactive*. The introduction of the Hi-C (high-throughput 3C) method [@lieberman_aiden_comprehensive_2009] opened new possibilities for exploring the three-dimensional organization of the genome. 

### Hi-C Library preparation

A specialized protocol for preparing the DNA library is necessary [@lieberman_aiden_comprehensive_2009; Fig. 1a]. Briefly, formaldehyde is used to crosslink spatially adjecent chromatin. Restriction enzymes are used to digest the crosslinked chromatin, leaving sticky ends that are filled and biotinylated with a polymerase. Then chimeric molecules are ligated in highly dilute conditions, where the restriction site is lost and a ligation site (also referred to as *ligation junction*) is created. Lastly, the ligation junction are isolated with streptavidin beads and sequenced as a paired-end library. 

To be able to create stage-resolved Hi-C library of spermatogenetis, additional steps have to be performed. First, the samples have to be treated immediately after harvesting to ensure viable cells. Secondly, the samples have to be purified to accurately represent each stage og spermatogenesis. Specifically, the data for this project (@wang_reprogramming_2019; acc. GSE109344) preluded the library preparation protocol by sedimentation-based cell sorting to separate live spermatogenic cells into different stages of differentiation, namely spermatogonia, pachytene spermatocyte, round spermatid, and spermatozoa. Then, the cells were fixed in their respective state before crosslinking. They use their own derived method for library preparation, termed small-scale *in-situ* Hi-C, allegedly producing a high-quality Hi-C libary from as little as 500 cells (capturing the variance of millions of cells). 

### Hi-C Data Analysis

The analysis of the read-pairs of a Hi-C library is divided into several smaller tasks: We must align the reads to the reference in a way such that the *intentional* chimeric read-pairs are rescued, and *unintentional* read-pairs are discarded. That is, they represent ligation junction of adjecent chromatin segments, or they represent technical artefacts or unintentional fusions of unrelated DNA. 

#### Aligning the Hi-C reads

Any software for local alignment can be used for aligning reads from a Hi-C library. However, one should make sure to disable paired-end rescue mode if possible, otherwise each read in a pair (each mate) should be aligned separately [@lajoie_hitchhikers_2015]. This removes the assumption that the distance between mates fits a known distribution because the genomic sequences originate from a continuous DNA-fragment. For example, the *bwa-mem* [ref] implementation of this (the `-P` option) activates the Smith-Waterman algorithm to rescue missing hits, but disables the search of hits that fit a 'proper' pair. After alignment, each read is typically assigned to the nearest restriction fragment to enable categorization of pairs into different categories. 

Interestingly, this last step is not included by default in *pairtools*, as [ref] observe very similar statistical properties on pairs that are either close or distant from the nearest restriction site. Thus, restriction fragment filters are not needed, and in stead, a simple filter is applied against short-distance pairs that is automatically calibrated. 


#### Identifying and Storing Valid Hi-C Pairs

One should be cautious when filtering invalid from valid pairs, as they are not easily distinguished. We should be able to put a detected ligation event into one of five categories: *dangling-end*, *self-circle*, *weird*, *intrachromosomal* (cis), and *interchromosomal* (trans) (see @tbl-ligation-events) [@bicciato_hic_2022; Ch. 1]. Either *dangling-end* or *self-circle* events are reported if a read-pair maps to the same restriction fragment, and deemed uninformative [@lajoie_hitchhikers_2015]. Usually, *weird* events are demeed uninformative as well, as it is challenging to distinguish a sequencing error from the result of a diploid fragment[^1]. 

PCR duplicates should be discarded as well, having either identical genomic sequence, or sharing exact 5' alignment positions of the pair [@lajoie_hitchhikers_2015; @bicciato_hic_2022, Ch. 1]. The probability that such pairs are valid (i.e. there are multiple of the same pairs) is very low. 

The *trans*/*cis*-ratio can be a good indicator of the noise level in the library, and additionally, the level of random ligation events can be quantified by counting the number of *trans* events occurring to mitochondrial genome. They should not occur naturally, as the mitochondrial genome is separated from the DNA in the nucleus. This method has some pitfalls that should be controlled for; some parts of the mitochondrial genome can be integrated into the host genome, and mitochondrial count may differ between states. 

\small

::: {#tbl-ligation-events .striped}

| Event name    | Explanation                                                                                        | 
|:--------------|:---------------------------------------------------------------------------------------------------|
| Dangling-end  | Non-digested collinear fragments. Fraction can be high.                                            | 
| Self-circle   | Collinear fragment(s) have circularized. Very low fraction could indicate unsuccesful ligation.
| Weird         | Mates have the same orientation on the reference. Is not possible with single copy fragment. Either sequencing errors or diploid fragments[^1]. |
| Cis           | Pairs from the same chromosome (intrachromosomal)                                                  | 
| Trans         | Pairs from distinct chromosomes (interchromosomal)                                                 |

[^1]: @bicciato_hic_2022 mentions that this type of ligations had been used to infer interaction between sister-chromatids post-replication in *Drosophila*. 

Five categories of ligation events and a short explanation. *Hi-C Data Analysis: Methods and Protocols Ch. 1*.
:::

\normalsize




#### Quality Control and Interaction Matrices

To determine the quality of the Hi-C library, most tools generate quality control log files at some point during the filtering steps, which can then be aggregated and analyzed (with e.g. MultiQC [ref]). The ratios between the different ligation events can be informative about the quality of the Hi-C library. Here, both the distribution of discarded reads across categories, as well as the ratios between *cis*/*trans* interactions for a certain organism provide information about the library. For example, the biases of different aligners might be captured by comparing the reason why reads are discarded between two different aligners, as well as if there is a preference of *cis* or *trans* in an alinger itself. This allows us to evaluate the mapping parameters as well as the filters applied downstream. 

Typically, a filter against low mapping quality is applied on the data before constructing the interaction matrix (Hi-C matrix), and a conventional threshold is $mapq < 30$ [@bicciato_hic_2022]. However, a considerable amount of reads do not pass that threshold, and thus one risks to discard potential valid information and should make sure to have enough data. Consequently, *HicExplorer* defaults a lower threshold ($mapq < 15$), and *pairtools* enforces no filter, but recommends setting this manually (starting at $mapq < 30$). 

Ultra-deep sequencing is required if one is to store the interaction matrix at the restriction fragment resolution, and usually, such high resolution is not required. Therefore, it is practice to bin the genome into fixed bin sizes, which also enables a more efficient handling of the data if the full resolution is not needed (e.g. when plotting large regions such as a whole chromosome). The conventional format to store a Hi-C matrix, consisting of large multidimensional arrays, is HDF5. Each HDF5 file can store all resolutions and metadata about the sample, resolutions typically ranging from 40kb to 1Mb. Additionally, *cooler* [ref] enforces conventions about the naming of the groups among other things in their .h5-wrapping file format *.cool*, and they provide a Python class `Cooler` as well for efficiently fetching and manipulating the files in Python. 


#### Calling Compartments (ICE) 

#### Edges




# Methods

In this project, we formulate two objectives: 

**A**: Reproduce the Hi-C interaction maps and eigendecomposition from [@wang_reprogramming_2019], with some modifications. We briefly use *HiCExplorer*, but change the analyses to use the *Open2C Ecosystem* [@open2c] which have a Pyton API as well as command-line functions, which can be paired very well with Jupyter Notebooks. The majority of the data analysis was run with a *gwf* workflow, and the commands that were visually inspected were run in Jupyter Notebooks. 

**B** Compare with regions of selection that are found in *human*. Investigate the biological meaning of the results. 

All computations were performed on GenomeDK (GDK) [ref], an HPC cluster located on Aarhus Uninversity, and most of the processing of the data was nested into a *gwf* workflow [ref], a workflow manager developed at GDK. I would like to thank GDK and Aarhus University for providing computational resources and support that contributed to these research results.

The whole of this project is carried out with reproducibility in mind, so an effort (and quite a significant amount of time) has been put into documenting code and organizing the project for readbility and transparency through a Quarto project [ref]. Therefore, all code, virtual environments and text  is made available as a Quarto book, rendered directly from the GitHub repository with GitHub Pages [ref]. To make this possible, the Quarto documentation has been extensively studied and discussed with *KMT* [ref, aknowledge]. 


## Initial Exploration with HiCExplorer

Here moves most of the text about HiCExplorer...

For the initial exploration of methods with *HiCExplorer*, the 5 first samples in 'fibroblast' were chosen (@tbl-hic-exploration). 

\small

{{< embed ../notebooks/01_hicexplorer.ipynb#tbl-hic-exploration >}}

\normalsize

The goal was to replicate some of the figures from @wang_reprogramming_2019 using *HiCExplorer*, especially to reconstruct interaction matrices and E1 graphs from macaque data.

The matrices are constructed with `hicBuildMatrix` from separately mapped read-pairs. Along with the matrix *.h5* file, a *.log* file it outputted, documenting the quality control for the sample. Multiple logs can be aggregated and visualized with `hicQC`. 

Before correction (or balancing) of the interaction matrix, a pre-correction filter is applied, filtering out low-count bins and very high-count bins. A threshold for Mean Absolute Deviation (*MAD*) is estimated by `hicCorrect diagnostic_plot`, followed by iterative correction with `hicCorrect correct --correctionMethod ICE`. 

The PCA was performed with `hicPCA` on the correcte matrices, yielding the first 3 PCs.

## Downloading Data and Project Structure

To reproduce the results from [@wang_reprogramming_2019], I chose to use their raw data directly from the SRA portal [ref]. I filtered the data to contain all their paired-end Hi-C reads, and included only macaque samples. The data set also contains RNAseq data, and the same tissues for both macaque and mouse. The meta data for the data set was extracted into a runtable `SRA-runtable.tsv`. To get an overview of the data accessions used in this analysis, we will first summarize the runtable  that contains the accession numbers and some metadata for each sample (@tbl-runtable-summary). It adds up to ~1Tb of compressed `fastq` files, holding ~9.5 billion reads, roughly evenly spread on the 5 tissue types.

\small

{{< embed ../notebooks/03_compartments.ipynb#tbl-runtable-summary >}}

\normalsize

## Handling coolers (Or: preparing coolers)

::: {#fig-flowchart-handling-coolers}

![](illustrations/placeholder2000x360.png)

A flowchart showing the pipeline from `.fastq` to `.mcool`. The first 6 steps were done with a Probably BioRender or Inkscape.
::: 

### The *gwf* workflow targets

A *gwf* workflow was created to handle the first part of the data processing, and each accesion number (read pair, mate pair) from the Hi-C sequencing was processed in parallel, so their execution was independent from each other. 

#### Downloading the reads

The reads were downloaded from NCBI SRA portal [ref] directly to GDK using `sra-downloader` [ref] as `.fastq.gz` files. 


#### Handling the reference

The latest reference genome for rhesus macaque (*macaca mulata*), *rheMac10* (or *Mmul_10*, UCSC or NCBI naming conventions, respectively) was downloaded to GDK from UCSC web servers with `wget` [ref]. To use `bwa` (Burrow Wheeler's Aligner) [ref] for mapping, rheMac10 needs to be indexed with both `bwa index` with the `--bwtsw` option and `samtools faidx`, which results in six indexing files for `bwa mem` to use. 

Since [-@wang_reprogramming_2019], the reference genome for rhesus macaque has changed several times from *rheMac2* to *rheMac10*, each time resulting in a much less fragmented reference assembly. Part of the reasoning for reproducing their results was doing so on the latest assembly of the Macaca mulata genome, which arguably will result in a more accurate mapping of the reads, and a better inference of the chromatin compartments as well. 

Several mappers were used in different configurations (described in below), and `bowtie2` requires its own indexing of the reference, using `bowtie2-build --large-index`, which creates six index files for `bowtie2` to use. `--large-index` creates the special indexing format required for large genomes such as macaque.


#### Mapping Hi-C reads

paragraph will be restructured. 

The main difference between Hi-C libraries and standard paired-end libraries is the high fraction of chimeric reads in Hi-C. As a contact pair is crosslinked and ligated before sequencing, chimeric reads occur as a feature, and standard mapping techniques seeks to filter out this type of reads [ref]. Thus, we need specialized tools for rescuing chimeric reads. That said, we have to be cautious distinguishing the intended chimerism for Hi-C and that of technical artefacts. 

It was not feasible to follow the same approach as [@wang_reprogramming_2019] with either *HiCExplorer* or *Open2C*, as they use a third software, *HiC-Pro*. Hic-Pro uses bowtie2 in end-to-end mode, followed by remapping of 5'-ends of the unmapped reads to rescue chimeric fragments along with another approach. I mapped the reads using `bowtie2 --end-to-end` without the rescue-remapping, and it returned a very high fraction of discarded reads. I argue that even when trying to reproduce results, it is nonsensical to use methods that are not state-of-the-art. The HiC-Pro pipeline stops at a normalized contact map, and is thus not sufficient for downstream analysis. 

**HiCExplorer**  Initially, recommendations from HiCExplorer were used. According to their documentation [ref] it is crucial to 1) align reads locally, and 2) map mates separately. They recommend either of `bwa` or `bowtie2`, so I tested both with their recommended settings. `bowtie2` turned out to be a lot more resource-intensive and to produce almost no mapped reads [ref sup-fig-bowtie2-stats], so I suspect some settings was not set correctly. The mapped reads was converted to a Hi-C Matrix (`.h5`) with *HiCExplorers* `hicBuildMatrix`, which is extremely memory-intensive, using ~120 GB memory for the biggest matrix. I followed *HiCExplorer* pipeline to plot and explore the matrices created from this mapping. However, the work was laborious for experimentation, as, even though written in Python, `HicExplorer` only comes with a command-line interface and provided functions all write plots to files. I did not manage to make an efficient implementation for plotting the `.h5` files produced by the pipeline, as would be required for utilizing Jupyter Notebooks for customizing plots. I relatively quickly shifted to *Open2C* for their promises of the greener grass (a Python API). 

**Open2C**  Suspiciously, [@open2c] never mentions any problems with aligning the Hi-C reads, they just provide an example using `bwa mem` in paired-end mode and with the `-P` option set, which activates the Smith-Waterman [ref] algorithm to rescue missing hits, by focusing on assigning only of of the mates to a good mapping and escape mate-rescue.  The documentation of `bwa` [ref](https://bio-bwa.sourceforge.net) state that both bwa-mem and bwa-sw will rescue chimeric reads. Consequently, Open2C does not have a builtin way of pairing the reads after mapping, and I was left with two options: **1)** to re(-)pair the individually mapped read-mates (.bam)  with `samtools-fixmate` into one of the specific input formats required for `cooler` to create an interaction matrix *cooler*, or **2)** re-map the reads  using Open2C's recommendations and use their established pipeline for producing a cooler. I chose the latter, where I mapped the fastq files to *rheMac10* in paired end mode for a pair (m1, m2) with `bwa mem -SP rheMac10 m1 m2`.


#### Parse and sort the reads

With *HiCExplorer* No action is needed, as this step is done implicitly when building the matrix

**Open2C** We need to convert the alignments into ligation events, and distinguish between several types of ligation events. The simplest event is when each side only maps to one unique segment in the genome 'UU'. Other events, where one or both sides map to multiple segments or the reads are long enough (>150bp) to contain two alignments (multiple ligations) have to be considered as well. Multiple ligations (walks) are treated according to the `--walks-policy` when parsing the alignments into valid pairs (or valid Hi-C contacts). Here, `mask` is the most conservative and masks all complex walks, whereas `5unique` reports the 5'-most unique alignment on each side. The pairs are piped directly into `pairtools sort` after parsing, as the deduplication step requires a sorted set of pairs. The *.pairs*-format produced by `pairtools` is an extension the [4DN Consortium](https://data.4dnucleome.org/file-formats/pairs/)-specified format, storing Hi-C pairs as in @tbl-pairsformat.

\small

::: {#tbl-pairsformat .striped}


| Index | Name      | Description                                                             |
|------:|:----------|:------------------------------------------------------------------------|
| 1     | read_id   | the ID of the read as defined in fastq files                            |
| 2     | chrom1    | the chromosome of the alignment on side 1                               |
| 3     | pos1      | the 1-based genomic position of the outer-most (5’) mapped bp on side 1 |
| 4     | chrom2    | the chromosome of the alignment on side 2                               |
| 5     | pos2      | the 1-based genomic position of the outer-most (5’) mapped bp on side 2 |
| 6     | strand1   | the strand of the alignment on side 1                                   |
| 7     | strand2   | the strand of the alignment on side 2                                   |
| 8     | pair_type | the type of a Hi-C pair                                                 |
| 9     | mapq1     | mapq of the first mate                                                  |
| 10    | mapq2     | mapq of the second mate                                                 |

: Column specification of the .pairs format as extended by `pairtools` [ref].
:::

\normalsize

I initially used `--walks-policy mask`, reasoning I had plenty of data points and could handle complex walks in a conservative way. Only later I realized the recommendations from *pairtools*, specifically informing that longer reads might have a significant proportion of reads that contain complex walks. With this in mind, I decided to re-parse the alignments into a new set of pairs, and equally apply the recommended filter (next section). As both results are saved, we can compare the two approaches. 


#### Filter (deduplicate) pairs

With *HiCExplorer*, no action is needed, as this step is done implicitly when building the matrix.

*pairtools* comes with a de-duplication function, `dedup`, to detect PCR duplication artefacts. At this point we will remove all reads that are mapped to an unplaced scaffold. Even though the publication of *rhemac10* assembly states they have closed 99% of the gaps since *rhemac8* [ref], *rheMac10* still contain more than 2,500 unplaced scaffolds, which are all uninformative when calculating the chromatin compartments as is the goal of this analysis. Therefore, we simply only include the list of conventional chromosomes (1..22, X, Y) when doing the deduplication. Initially, the default values were used to remove duplicates, where pairs with both sides mapped within 3 base pairs from each other are considered duplicates. 

`cooler` recommend to store the most comprehensive and unfiltered list of pairs, and then applying a filter it on the fly by piping from `pairtools select`. Initially, I missed this step and I did not filter for mapping quality. After reparsing the alignments and applying the same analysis, we compare the two pipelines. 

A quality control report is generated by `pairtools dedup`, and the reports are merged with `MultiQC` [ref] for each cell type.

#### Create interaction matrices (coolers) 

With *HiCExplorer* `hicBuildMatrix` both parse and filter the mapped reads. The default value was used, where alignments with $mapq < 15$ are discarded.

**Open2C** The final part of the *gwf* workflow takes `.pairs` as input and outputs a `.cool` file (*cooler*). Initially, we read directly from the newly generated deduplicated pairs without additional filtering, but here, the official recommendation is to filter out everything below $mapq = 30$ by piping the pairs through `pairtools select "(mapq1>=30) and (mapq2>=30)"` to `cooler cload pairs`. 

We should have plenty of data to do the filtering, but I argue it is not strictly necessary. I will show a histogram of the *mapq* scores to convince you [ref].

I have re-parsed the alignments and created new coolers, including only the Hi-C contacts where $mapq \leq 30$, following the current recommendations from `cooler`. 


### Notebook edits

As `cooler` and `cooltools` have a Python API, the more experimental parts of the analysis were moved to Jupyter Notebooks. `cooltools` comes with a helper library for operations on genomic intervals called `bioframe`. 

#### Pooling samples (Merging coolers)

The samples are grouped into *replicates* with a unique **BioSample** ID, but we chose to pool all the interaction matrices for each cell type. We argue that when @wang_reprogramming_2019 determine compartments to be highly reproducible between replicates, by merging the replicates we can get a more robust signal. 

`cooler merge` was used to merge all samples in each sub-folder (cell type) to just one interaction matrix for each cell type. The function merges matrices of the same dimensions by simply adding the interaction frequencies of each genomic position together, resulting in less empty positions by chance.

#### Create multi-resolution coolers (zoomify) 

A feature of working inside the ecosystem of *Open2C* [ref] is that it natively provides support for storing sparse interaction matrices in multiple resolutions in the same file by adding groups to the cooler [ref]. We can then efficiently store resolutions (i.e., different bin sizes) that is multiples of the smallest bin size. We chose to use 10kb, 50kb, 100kb, and 500kb bins, and the resolutions are made by recursively binning the base resolution. We call this process zoomifying. 

#### Matrix balancing (Iterative correction) 

Finally, we balance the matrices using the cooler CLI. We use `cooler balance` with the default options which iteratively balances the matrix (Iterative Correction). It is first described as a method for bias correction of Hi-C matrices in [@imakaev_iterative_2012], where it is paired with eigenvector decomposition, coining the combined analysis **ICE**. Here, the eigenvector decomposition of the obtained maps is experimentally validated to provide insights into local chromatin states. 

[According to `cooler` documentation] We have to balance the matrices on each resolution, and thus it cannot be done prior to zoomifying. They state that the balancing weights are resolution-specific and will no longer retain its biological meaning when binned with other weights. Therefore, we apply `cooler balance` to each resolution separately. `cooler balance` will create a new column in the `bins` group of each cooler , `weight`, which can then be included or not in the downstream analysis. This means we will have access to both the balanced and the unbalanced matrix.
         
The default mode uses genome-wide data to calculate the weights for each bin. It would maybe be more suitable to calculate the weights for *cis* contacts only, and that is possible through the `--cis-only` flag, and that can be added to another column, so that we can compare the difference between the two methods easily. However, we will only use the default mode for now. 

#### Eigendecomposition

The eigendecomposition of a Hi-C interaction matrix is performed in multiple steps. As value of the eigenvector is only *significant* up to a sign, it is convention [ref] to use GC content as a phasing track to orient the vector. E1 is arbitrarily defined to be positively correlated with GC content, meaning a positive E1 value signifies an active chromatin state, which we denote a A-type compartment (or simply A-compartment). We performed eigendecomposition of two resolutions, 100 Kbp and 500 Kbp. @wang_reprogramming_2019 briefly describes their method to calculate the eigenvectors as a sliding window approach on the observed/expected matrix in 100 kb resolution summing over 400 kb bins with 100 kb step size, a method I was not able to replicate in the *Open2C* ecosystem. I decided to mimic this by smoothing the 100 kb E1 values by summing to 500 kb bins in steps of 100 kb, yielding a comparable resolution which I denote '*pseudo*-500 kb' resolution (*ps500kb*).

First, we calculate the GC content of each bin of the reference genome, *rheMac10*, which is binned to the resolution of the Hi-C matrix we are handling. It is done with `bioframe.frac_gc` (*Open2C*). To calculate the E1 compartments, we use only within-chromosome contacts (*cis*), as we are not interested in the genome-wide contacts. `cooltools.eigs_cis` will decorrelate the contact-frequency by distance before performing the eigendecomposition. `eigs_cis` needs a *viewframe* (view) to calculate E1 values, the simplest view being the full chromosome. However, when there is more variance between chromosome arms than within arms, the sign of the first eigenvector will be determined largely by the chromosome arm it sits on, and not by the chromatin compartments. To mitigate this, we apply a chromosome-arm-partitioned view of the chromosome (as a bedlike format, described in `bioframe` docs [ref]). 

Additionally, to mimic the *Local PCA* from [@wang_reprogramming_2019], I also defined a view of 10 Mb bins. Thoughout the project, I will compare results from each of the three views and resolutions. 

#### Plotting matrices

*HiCExplorer* plots matrices to .png from the command-line. When plots were generated (with `hicPlotMatrix`), it produces a .png output that has to be loaded back into the notebook. There is limited support for modifying the plot (from command-line options), such as to add spacing for a bigWig track with E1 values, add plot titles, and define the size and resolution of the plot. I briefly tried to implement a plotting function on the .h5 matrices and bigWig tracks, but it could not fetch regions from a matrix on the fly and had to load the full matrix into memory (that is, all full-length chromosomes). To better visualise differences in the interaction matrix, the interaction frequency $f_i$, is transformed to $\log\mathrm{1p}(f_i) = \log\left(1 + f_i\right)$. It is required to visualize the normalized interaction frequency, as there are mostly values very close to 0, but it also aids the visibility in the raw counts matrix.

We use matplotlib and seaborn to plot in the *Open2C* framework. Utilizing the `cooler` class, we can fetch regions of the matrix without modifying the file. As my analysis is centered around the X chromosome, it is efficiently handled by simply fetching 'chrX' from the matrix with `cooler.Cooler.matrix().fetch('chrX')`. Many methods of the cooler class returns data selectors, which do not retrieve data before it is queried [ref]. This means we can create many selectors at once without overflowing memory, enabling us to plot multiple interaction matrices side-by-side, e.g. the corrected and un-corrected matrices. This is easily done with the `balance` parameter of the matrix selector (`.matrix()`), which determines if it should apply the balancing weights to the coordinates and defaults to `True`. 

The matrix is retrieved an plotted with `matplotlib.pyplot.matshow`, which automatically produces a heatmap image of the matrix. Here, in stead of transforming the interaction matrix, the color scale is log-transformed with `matplotlib.colors.LogNorm`. Additionally, `cooltools` comes with more tools to aid visualization: *adative coarsegrain* and *interpolation*, which can be chained. `adaptive_coarsegrain` iteratively coarsens an array to the nearest power of two and refines it back to the original resolution, replacing low-count pixels with NaN-aware averages to ensure no zeros in the output, unless there are very large regions that exceed the `max_levels` threshold, such as the peri-centromeric region. 

I implemented a plotting utility, `plot_for_quarto` in notebook `07_various_plotting.ipynb` that is compatible with the YAML cell-options read by Quarto's `embed` shortcode. It will take an arbitrary number of samples and plot a chromosome (or region) with or without its respective E1 value for either of the three viewframes that has been created. The input is a (subsetted) *pandas DataFrame*, defined from a file search matching a pattern specified to the `glob` Python module.  

### Compartments and Their Edges (Transitional Regions)

From the eigenvectors, the A-compartments were extracted in bedgraph-format (`['chrom', 'start', 'end']`) and compared with ECH90 regions lifted to *rheMac10* from human [ref what reference?]. We perform visual inspection of the genomic intervals and test whether ECH90 regions are enriched near the edges of the compartments by defining a 200 kilobase transition-zone centered at each sign change of E1 (referred to as *compartment edge*). We compare genomic intervals (or sets) both visually by plotting the regions, and by a proximity test and bootstrapping the Jaccard index. 

#### Proximity test

Determines whether the non-overlapping parts of the sets are more proximal than expected by chance. We define the *annotation* set and the *query* set, and the distance from each interval on the *query* to the most proximal interval on the *annotation* is used to generate an index of proximity. It uses bootstrapping ($b = 100000$) to generate the null distribution, and finally, the fraction of the *null* as or more extreme as our observed proximity is reported as the p-value. 

#### Jaccard test

Measures the significance of the observed Jaccard index (intersection over union) between two sets. The index is a measure of *similarity* between two sets (between 0 and 1), which is very sensitive to the size difference between the sets, as even when comparing a set of intervals to a small subset of itself will yield a very small Jaccard index. When we use bootstrapping to generate a null distribution (shuffling the intervals of the *query*), we generate the probability that the two sets (with their respective number and size of intervals), are as similar or more than what we observe. The ratio is reported as the p-value. However, this approach is still sensitive to flipping of query/annotation, as only the query is bootstrapped. 


#### Multiple testing

Careful considerations were made to avoid multiple testing biases (p-hacking): Performing tests on all combinations of variables (cell type, resolution, viewframe, flip annot, query, test) will yield 260 p-values, and we would have to adjust the significance threshold (with $\alpha = 0.05$, we expect 13 'significant' tests by chance alone). However, if we choose only




# Results

## Exploration with HicExplorer 

### Quality Control

The separately mapped read-mates were parsed into a *.h5* interaction matrix by `hicBuildMatrix`, which include a *.log* file documenting the builtin quality control (hereafter, *QC*). Log files from the 5 samples were merged with `hicQC` (@fig-explorer-qc). We observe showed equal fractions of the read-orientation of read-pairs (@fig-explorer-read-orientation), which is expected for a good Hi-C library. Additionally, it determines between 40% to 50% of the total reads to be valid Hi-C contacts (@fig-explorer-unique-pairs), which is [allegedly](https://hicexplorer.readthedocs.io/en/latest/content/example_usage.html#creation-of-a-hi-c-matrix) [ref] usually only 25%-40%. ~~Overall a solid set of Hi-C samples until now~~. @fig-explorer-contact-distance shows, however, unusually high fractions of *inter*-chromosomal contacts (up to 30%) compared to *intra*-chromosomal contacts (also denoted *trans* and *cis* contacts, respectively). It is expected that *cis* contacts are orders of magnitude more frequent than *trans* contacts [@bicciato_hic_2022, p. 236; @lieberman_aiden_comprehensive_2009], and *HiCExplorer* states it should be below 10% [ref]. The high fraction may be mitigated by enforcing a stricter *mapq* threshold for a valid Hi-C pair, as we also observe higher-than expected valid contacts. However, we continue without the current matrices. 

::: {#fig-explorer-qc layout-ncol=3}

![Read orientation](../steps/bwa/QC_all_samples/read_orientation.png){#fig-explorer-read-orientation}

![Unique pairs](../steps/bwa/QC_all_samples/unmappable_and_non_unique.png){#fig-explorer-unique-pairs}

![Discarded pairs](../steps/bwa/QC_all_samples/pairs_discarded.png){#fig-explorer-discarded-pairs}

![Pairs sequenced](../steps/bwa/QC_all_samples/pairs_sequenced.png){#fig-explorer-pairs-sequenced}

![Contact distance](../steps/bwa/QC_all_samples/distance.png){#fig-explorer-contact-distance}

Quality control of the mapped Hi-C reads using *HiCExplorer* `hicQC`. The figures should be moved to Supplementary/Appendix because they are ugly and un-alignable. But that is the fault of HiCExplorer, not me. ~~Or I should spend a couple of hours to plot them manually~~.
:::

### Correction

The correction diagnostic tool yielded a similar *mad* threshold within the range $[-3,-2]$. Even so, I followed the *HicExplorer* recommendation to set the lower threshold to at least -2 and the upper threshold to 5 in the pre-normalization filter. I argue that with a high number of valid contacts, it is safer to err on the side of caution and maybe filter out bad data. 

::: {#fig-explorer-pre-correction layout="[[-5,25,25,25,-5], [-17.5,25,25,-17.5]]"}

![SRR6502335](../figures/bwa/SRR6502335_diag_plot.png){#fig-explorer-pre-correction-SRR6502335}

![SRR6502336](../figures/bwa/SRR6502336_diag_plot.png){#fig-explorer-pre-correction-SRR6502336}

![SRR6502337](../figures/bwa/SRR6502337_diag_plot.png){#fig-explorer-pre-correction-SRR6502337}

![SRR6502338](../figures/bwa/SRR6502338_diag_plot.png){#fig-explorer-pre-correction-SRR6502338}

![SRR6502339](../figures/bwa/SRR6502339_diag_plot.png){#fig-explorer-pre-correction-SRR6502339}

Histograms of the number of counts per bin (bottom x-axis) and the modified z-score (top x-axis) from which the *mad* threshold is defined.
:::

> NB: when I say that a mapper performs poorly in finding Hi-C contacts, it is `hicBuildMatrix` that performs badly when reads are mapped with that mapper.

To compare these mappings with others, the QC results is an easy way. Therefore, the reads were mapped with *bowtie2* in both end-to-end- and local-mode followed by `hiCBuildMatrix`, and the QC from each method was plotted next to each other (@fig-explorer-all-3-qc). Interestingly, *bowtie2* was much more computer-intensive in both modes, perhaps because of the `--very-sensitive` option. In any case, the QC reveals a major difference in the total number of reads that are determined to be valid Hi-C contacts by `hicBuildMatrix`. As expected, *end-to-end-bowtie2* performs worse at locating Hi-C contacts than the other methods [ref row1], finding a very low amount of mappable, unique pairs passing the quality threshold. In contrast, *local-bowtie2* performs similarly to *bwa* in finding mappable, unique, high-quality pairs, but calls only approximately half the number of valid Hi-C contacts (>20%), resulting in a fraction of valid Hi-C pairs that hits the expectation from *HicExplorer* docs [ref row3]. With *bwa*, the reads were discarded either due to low mapping quality or non-unique mates, whereas with *local-bowtie2*, the reads were almost exclusively filtered out due to low mapping quality. This must be a result of how the mappers assign mapping quality, and I believe *local-bowtie2* looks suspiciously selective in finding unique but low quality alignments. *end-to-end-bowtie* almost exclusively filters out read-pairs where one mate is unmapped, which is expected when the majority of reads are unmapped. 

{{< embed ../notebooks/01_hicexplorer.ipynb#fig-explorer-all-3-qc >}}

As discussed, the five samples were pooled with `hicSumMatrices`, and the non-standard contigs (unplaced scaffolds) were filtered out, and the different resolutions were created (`hicMergeMatrixBins`). *HiCExplorer* also  comes with a normalization function prior to correcting the matrix, which should be applied if different samples should have comparable bin counts. It has no effect when having only one matrix. Nevertheless, the pooled matrix was normalized and then corrected compared in @fig-explorer-pooled-norm-normcorr. 

::: {#fig-explorer-pooled-norm-normcorr layout-ncol="2"}

![Normalized matrix chrX](../figures/bowtie2/local/filter_pooled_50kb_chrX.png){#fig-explorer-pooled-chrX-norm}

![Normalized and corrected chrX](../figures/bowtie2/local/normalized/normsm_filter_pooled_100kb_corrected_chrX-full.png){#fig-explorer-pooled-chrX-normcorr}

A comparison of interaction matrices before/after iterative correction (*HiCExplorer*).
:::

It is now obvious why we have to correct the matrix. The uncorrected (@fig-explorer-pooled-chrX-norm) has no signal apart from the diagonal. Even though some bins have been filtered out, the expected *plaid* pattern of a contact matrix is visible along the diagonal after the correction (@fig-explorer-pooled-chrX-normcorr), leaving evidence for chromatin structure, especially in the first 50 million bases of the chromosome. There is a wide region of empty values at the place of the centromere. 

### Eigenvectors

The PCA performed by `hicPCA` on the pooled samples at both 50kb and 100kb resolution yielded the first 3 principal components. For PC1 on both resolutions (@fig-explorer-pc1-50kb, @fig-explorer-pc1-100kb) we observe only a single sign change which occurs at around 60 Mbp, the region of the centromere. It means the PCA has captured more variance between the chromosome arms than within them, making it uninformative about chromatin compartments. Upon visual inspection, it is clear that neither of the PC graphs capture the pattern of the interaction matrix by its change of sign. It seems the PCs capture variance from a bias that varies slowly and predictably along the chromosome. The first PC that is supposed to capture the compartments very suspiciously changes sign at the region of the centromere, a classic problem that could be solved by restricting the values from which the PC is calculated along the chromosome. Unimpressed, I rationalize that the option `--extra-track` to provide a gene track or histone coverage should not affect this result much. It should be provided as a phasing track to orient the eigenvector to positively correlate with gene density or histone marks, and could possibly muddle the compartments if not included. At this point, I stoppped using *HiCExplorer*, as I assessed that a more flexible tool was needed.

::: {#fig-explorer-pca layout-ncol="3"}

![](../figures/bowtie2/local/normalized/pc1_50kb_corrected_chrX.png){#fig-explorer-pc1-50kb}

![](../figures/bowtie2/local/normalized/pc2_50kb_corrected_chrX.png){#fig-explorer-pc2-50kb}

![](../figures/bowtie2/local/normalized/pc3_50kb_corrected_chrX.png){#fig-explorer-pc2-50kb}


![](../figures/bowtie2/local/normalized/pc1_100kb_corrected_chrX.png){#fig-explorer-pc1-100kb}

![](../figures/bowtie2/local/normalized/pc2_100kb_corrected_chrX.png){#fig-explorer-pc2-100kb}

![](../figures/bowtie2/local/normalized/pc3_100kb_corrected_chrX.png){#fig-explorer-pc3-100kb}

Corrected interaction matrix for chromosome X along with PC1, 2, or 3, respectively. a-c: 50kb resolution, d-f: 100kb resolution. *HiCExplorer*. 
:::

## Open2c ecosystem

### Quality Control

#### Initial run (`--walks-policy mask`)

Comparing the multiQC report for each of the cell sources show similar distributions of *unmapped* (both sides unmapped), *one-sided* (one side mapped), *two-sided* (both sides mapped), and *duplicated* (w.r.t. total mapped) reads. The percentage of *cis* pairs w.r.t. mapped pairs is around 70% for all samples. [ref supptbl-qc-all-samples-mask]. The valid pairs also show similar distributions of pair types divided into 10 categories. The $P(s)$ curve looks similar as well, peaking between 270 bp and 320 bp separation (ref suppfig-multiqc-ps-curve). The QC does not show any information about mapping quality of the reads. Note that the $P(s)$ ccurve arise from pre-filtered pairs, and should be compcared with the $P(s)$ of the cooler after filtering. 

[ref if there is time, include a histogram of mapq values for pairs]

#### Recommended (`--walks-policy 5unique`)

Parsing alignments with the recommended walks-policy aproximately halves the percentage of *unmapped* reads, and *one-* and *two-sided* reads as well *duplicated* reads are slightly increased. Overall number of unique pairs are increased with more than 20% increase. The percentage of *cis* pairs are only decreased by a percentage point at most [ref supptbl-qc-all-samples-5unique]. 


### Correction

Matrix balancing did not show major improvement in the plaid pattern, as it was already pretty good. It does, however, filter out bins that are deemed too low-count to be informative, for example peri-centromeric regions. The matrix was expected to be smoother after balancing (for chromosomes), as regions along a chromosome should only vary slowly in contact frequency with other regions [ref]. 

{{< embed ../notebooks/05_rec_compartments.ipynb#fig-rs-chrx-raw-balanced-cgi >}}

{{< embed ../notebooks/05_rec_compartments.ipynb#fig-rs-chrx-raw-balanced-cgi-subset >}}

The coarsegrained and interpolated matrix is useful to make a good-looking interaction matrix, but is not that useful for analysis purposes. It might get easier to visually inspect the matrix, but it is not clear how well the interpolated matrix reflects the structure of the chromatin. The regions that are coarsgrained are small zero- or low-count bins which are averaged, effectively reducing the resolution of those regions until the count is sufficient. They get more frequent the longer genomic distance (the further we travel from the diagonal), and effectively enables us to get some intuition about the interactions. The coarsegrain, however, does not interpolate the `NaN`s created when filtering out whole bins in the balancing step (horisontal and vertical lines in @fig-rs-chrx-raw-balanced-cgi and @fig-rs-chrx-raw-balanced-cgi-subset; middle). This is done in a subsequent step by linearly interpolating the `NaN`s. Examining the interpolated matrix on full chrX (@fig-rs-chrx-raw-balanced-cgi; right) gives the impression that the pericentromeric (at ~60 Mbp) region harbours a *very* strong compartment, but that is clearly an artefact of the interpolation on the very large empty region of the centromere, where the diagonal is somehow extended in a square. On the thinner lines, the interpolation seem to be more smooth, and barely noticable on the diagonal. 


#### `NaN` histograms

As expected, most of the low quality bins are located on the edges of the chromosome arms, especially the region around the centromere [ref litterature], as they contain many repetitive sequences. The low-quality bins are filtered out by the balancing algorithm, those bins are `NaN` in the Hi-C matrix. The median position of the `NaN` values (@fig-e1_nan_hist) ranges between $58$ and $63.5$, which is within the estimate of the centromeric region of *rhemac10*. 

{{< embed ../notebooks/05_rec_compartments.ipynb#fig-e1_nan_hist >}}

The fact that the medians lie within the centromeric region on all cell sources shows both that the majority of the bad bins are in the (peri)centromeric region *and* there are approximately equally many on each side.


### Compartments (Eigenvectors)

The three viewframes (*Full*, *Arms*, *10Mb*) for the calculation of the eigenvectors captured different variability in the data (@fig-e1-matrix-500kb-full-arms-10mb-round_spermatid), and as expected, the inferred compartments (colored red on the E1 tracks) are more abundant and smaller with smaller viewframes. To determine how well each of the E1 tracks capture the pattern in the interaction matrix, we can overlay the matrix with the E1 sign-change and visually determine if the squares reflect the E1 sign change (@fig-e1-matrix-500kb-full-arms-10mb-round_spermatid). 

::: {#fig-e1-matrix-full-arms-10mb-round-spermatid layout="[3,-0.2,3]"}

{{< embed ../notebooks/05_rec_compartments.ipynb#fig-e1-matrix-500kb-full-arms-10mb-round_spermatid >}}

{{< embed ../notebooks/05_rec_compartments.ipynb#fig-e1-matrix-100kb-full-arms-10mb-round_spermatid >}}

Super caption, subcaptions should be moved here (from notebook). They now fit on the page, but it would be nice to make this as one plt.subplots with shared axis title etc. *Update:* The notebook is ready for making these plots (`07_various_plotting.ipynb`, with a new plotting function) should be same size as the following matrix plots.
:::

I argue that without more finescaled knowledge than the position of the centromeres, the arbitrary size of the 10 Mb windowed E1 can not fully be justified. Also, @wang_reprogramming_2019 concludes that only the pachytene spermatocyte showed local interactions in that viewframe (what they refer to as *refined A/B-compartments* ), and all the other stages of spermatogenesis were consistent with the conventional A/B compartments. The reasonable thing to do is therefore to continue the analysis, focusing on the arms-restricted eigendecomposition. Nevertheless, we also keep *refined* compartments in the analysis. 

Additionally, as I created coolers with two different sets of parsing parameters we will compare the resulting matrices and their compartments (@fig-rs100-recpe-pe). As expected, we observe more empty bins in the Hi-C matrix, but otherwise, the interaction pattern is indestinguishable when going from the initial run (PE) to the recommended parameters (redPE). The effect on the E1 is more noticable, where the absolute magnitude of the E1 values is generally smaller. There is, however, a small region that changes sign (from A to B) on the 10Mb-windowed ('refined') E1 track (@fig-rs100-recpe-pe;c+d, zoomed-in region). This region is surrounded by added empty bins, which could mean that too many low quality pairs in PE were introducing bias and swapped the sign of E1. It is supported by the fact that the sign change *only* occured in *refined* E1, and that the sign after filtering weak pairs ($mapq < 30$) is consistent with the *arms* view. It supports my previous postulate that it is better to use a viewframe where with explicit molecular meaning than one of an arbitrary window size. That said, the `mapq` threshold should really be determined taking both coverage and resolution into account. For our purposes, and with the *arms* view, the mapping- and parsing parameters do not seem to be too sensitive.

{{< embed ../notebooks/07_various_plotting.ipynb#fig-rs100-recpe-pe >}}

To emphasize the findings, the sets of A-compartments were compared between the two parsing runs, showing almost identical compartment calls. Additionally, the set difference was 8 bins between PE and recPE for round spermatid 100kb and 5 bins for fibroblast for *arms* viewframe (@fig-rs-fb-100-pe-recpe-intervals; a+b, respectively). We observe a high number of differences around 76Mb for the refined compartments (10Mb) of round spermatid, which is consistent with the sign-flip of E1 values discussed earlier. Anything else would be surprising, as it is the same data, but visualized in a different way. 

{{< embed ../notebooks/07_various_plotting.ipynb#fig-rs-fb-100-pe-recpe-intervals >}}

The observed difference between the sets can for our data be attributed to chance, but we cannot draw general conclusions about the parameters in general. I argue that the quality and size of the Hi-C library will influence sensitive to parsing parameters. In that case, the most flexible approach is still to follow the recommendations from `cooler` to report more pairs as valid contacts, and then create coolers with different *mapq* filters if issues are encountered. 


### Compartment Edges (transition zones)

We compare how the ECH90 regions fit when queried on top of the A-compartments and equivalently for the edges, for fibroblasts and round spermatids at 100kb resolution. When queried against the edges in stead, the the total set size is reduced to less than 50%. Interestingly, some of the intersections between A-compartments and ECH90 remain, and new ones appear as we move to the outside edge of the compartment (@fig-comps-edges-ech). This indicates that most, but not all, of the intersection between ECH90 regions and the A-compartments are within 100kb of the compartment edge, and additional overlap is gained if we define a transition zone on the outside of the edge as well. To visualize this (outside) edge enrichment, we find the set difference of the ECH-intersection to compartments and edges, respectively (@fig-edge-enrichment), thus removing all the 'inside' edges. We observe that in almost all of the of the regions of $ECH \cap Comp$ are accompanied by an edge also intersecting ECH ($ECH \cap Edge$), localized where the *Diff* track aligns (within 100kb) with both $CompInt$ and $EdgeInt$.

{{< embed ../notebooks/07_various_plotting.ipynb#fig-comps-edges-ech >}}

{{< embed ../notebooks/07_various_plotting.ipynb#fig-edge-enrichment >}}

We apply both proximity test and Jaccard test, to see how well the results could occur by chance (@fig-proximity-jaccard-bar). For completeness, the tests are included for all cell types, but we only use 100kb resolution arms viewframe. We observe that both fibroblast and round spermatid have $p < 0.05$ for both tests, meaning the two cell type have both more intersection with ECH regions than expected by chance (Jaccard) *and* the non-overlapping intervals are more proximal to compartment edges than expected by chance (proximity test). I argue that a significant Jaccard statistic should be interpreted as a significant amount of overlap between the two sets, i.e. compartment edges and ECH90 regions, and the proximity test (when performed on the edges) gives us information about the potential of expanding or moving the transition window. That is, if the non-overlapping regions are *very* proximal, a larger (or shifted) window to only capture the 200kb region outside of the edge might be favourable. 

{{< embed ../notebooks/06_rec_genomicintervals.ipynb#fig-proximity-jaccard-bar >}}

## Testing against hybrid incompatibility in baboons

Initially, the compartment edges of round spermatid at 100kb resolution (RS100) were plotted against the lifted coordinates from a *P.* anubis-hamadryas hybrid population, where either all the sampled individuals have *Papio anubis* ancestry or 95% of the sampled individuals have *Papio hamadryas* ancestry. Their respective intersections were plotted undeneath. We expect less intersection for *hamadryas* than for *anubis* as the total set size is much smaller. The compartment edges and *Papio anubis*-derived regions(@fig-baboon-rs100-intersect; b) seem to be highly enriched in the first 25 Mbp, and thus it has a high degree of intersection with the compartment edges. Interestingly, the ECH90 set is nearly empty in that region, making the finding outside the scope of this analysis, although it could be useful for determining the mechanism for selecting the *P.anubis* ancestral allele in the hybrid baboon population. The *P.hamadryas*-derived regions seem intersect the compartment edges more centered on the chromosome (@fig-baboon-rs100-intersect; a). The proximity test ruled out that the non-intersecting parts of the respective regions were this proximal by chance. However, the Jaccard test revealed that the intersection between the RS100 and both Hi-*P.hama* and Hi-*P.anu* can be explained by chance alone . 

{{< embed ../notebooks/07_various_plotting.ipynb#fig-baboon-rs100-intersect >}}


{{< pagebreak >}}

# Discussion

Here is the discussion



# Bibliography {.unnumbered}

\begingroup
\raggedright
::: {#refs}
:::
\endgroup
