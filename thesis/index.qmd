---
title: "Chromatin Compartments and Selection on X"
subtitle: "How Edges of Active Chromatin Align with Selection Regions in Primates"
authors:
  - name: "Søren Jørgensen"
    affiliation: |
      Bioinformatics Research Center (BiRC), \\
      Dept. of Molecular Biology and Genetics, \\
      Aarhus University, Denmark
    roles: writing
    corresponding: true
    email: 201906763@post.au.dk
  # - name: "Kasper Munch"
  #   affiliation: |
  #     Ass. Prof. Bioinformatics \\
  #     Bioinformatics Research Center (BiRC), \\
  #     Dept. of Molecular Biology and Genetics, \\
  #     Aarhus University, Denmark
  #   roles: supervision
degree: MSc. Bioinformatics
keywords:
  - Hi-C
  - Chromatin Compartments
  - Selection
abstract: |
  This is a dummy abstract, dreamt up by chatGPT. This thesis investigates the 3D chromatin architecture of the X chromosome in baboons, macaques, and humans, focusing on chromatin compartments during spermatogenesis. Using publicly available Hi-C data, interaction maps were created to identify Principal Component 1 (PC1) compartments, revealing distinct compartmentalization patterns among species. The analysis included transition zones, where chromatin shifts between compartment types, and their correlation with positively selected regions. By comparing these zones with evolutionarily significant regions, the study explores how chromatin structure influences evolutionary pressures. Key findings include conserved chromatin features that may help retain non-advantageous alleles, suggesting a role for selfish genetic elements in genome evolution. This research offers new insights into the relationship between chromatin architecture and evolutionary dynamics across primate species.
plain-language-summary: |
  3-dimensional structure of chromatin brings light onto the mystery of selfish genes.
key-points:
  - Figures from a paper was reproduced, analyzing A/B chromatin compartments of rhesus macaque X chromosomes
  - Differential compartment analysis was conducted comparing with papio anubis
  - Regions was overlayed with genes of interest (positive selection)
date: last-modified
---

# Introduction

## Sexual reproduction (spermatogenesis, meiosis)

The production of gametes in a sexually reproducing organism is a highly complex process that involves numeruous elements. Spermatogenesis, the process of forming male gametes, involves four stages of differentiation from a germ cell through *spermatogonia*, *pachytene spermatocyte*, and *round spermatids* to *spermatozoa*, or *sperm* [@wang_reprogramming_2019], and it is the very basis of male reproduction. The specialized cell division of meiosis neatly handles the pairing, recombination, and segregation of homologous chromosomes, thereby ensuring proper genetic distribution. Deeply understanding the steps of molecular steps of reproduction and how our genetic material is inherited is essential in biology, bringing insight to areas such as speciation, population diversity, and (male) infertility.


## Selfish genes (and randomness) 

The conventional story of meiosis in gametogenesis is one of random segregation of the sex chromosomes. They split into haploid gametes, where each chromosome has an equal chance of being passed on to a gamete. That seems like a fair game, but what if some genes are cheating the system by making others less viable. A meiotic driver is a selfish gene element that modulates meiosis and preferentially transmits its own allele through meiosis, regardless of the downstream fitness effects it may have (good or bad) on the organism it is part of. This phenomenon challenges the traditional understanding of selection, extending its scope beyond the fitness effects on an organism to include selective pressures at the molecular level. 
For example, if some genes on the X chromosome create a disadvantage for gametes that *do not* contain those genes, making sure the Y chromosome is not as viable as the X, resulting in a sex imbalance and possibly numerous other downstream effects. That is exactly what is coined *sex chromosome meiotic drive* [@jaenike_sex_2001], a result of selfish genetic elements. 

Motivated by previous results in the Munch Research group [@munch_group_2024] on hybrid incompatibility and extended common haplotypes [@skov_extraordinary_2023; @sorensen_genome_wide_2023] that could be explained by meiotic drive, we wanted to investigate how these patterns correlate with chromatin compartments. 

## Our Organism of Interest, Wang et al., and the references

## Extended Common Haplotypes Discoverved in Humans

## Chromatin Conformation

## High-Throughput Chromosome Conformation Capture (Hi-C)

Our DNA can be divided into different orders of structure. *3C* focus on identifying the highest orders of organization inside the nucleus, that is, when the 30 nm thick coil of chromatin fibers folds into loops, Topologically Associating Domains (TADs), and chromatin compartments. Here, we narrow our focus on the largest of the structures, *compartments*, that is known to determine availability to transcription factors, thus making an *A* compartment *active*---and the *B* compartment *inactive*. The introduction of the Hi-C (high-throughput 3C) method [@lieberman_aiden_comprehensive_2009] opened new possibilities for exploring the three-dimensional organization of the genome. 

### Hi-C Library preparation

### Hi-C Data Analysis

##### Aligning the Hi-C reads

##### Identifying and Storing Valid Hi-C Pairs

##### Interaction Matrices

##### Calling Compartments (ICE) 

##### Edges



{{< pagebreak >}}


# Methods

In this project, we formulate two objectives: 

**A**: Reproduce the Hi-C interaction maps and eigendecomposition from [@wang_reprogramming_2019], with some modifications. We briefly use *HiCExplorer*, but change the analyses to use the *Open2C Ecosystem* [@open2c] which have a Pyton API as well as command-line functions, which can be paired very well with Jupyter Notebooks. The majority of the data analysis was run with a *gwf* workflow, and the commands that were visually inspected were run in Jupyter Notebooks. 

**B** Compare with regions of selection that are found in *human*. Investigate the biological meaning of the results. 

All computations were performed on GenomeDK (GDK) [ref], an HPC cluster located on Aarhus Uninversity, and most of the processing of the data was nested into a *gwf* workflow [ref], a workflow manager developed at GDK. I would like to thank GDK and Aarhus University for providing computational resources and support that contributed to these research results.

The whole of this project is carried out with reproducibility in mind, so an effort (and quite a significant amount of time) has been put into documenting code and organizing the project for readbility and transparency through a Quarto project [ref]. Therefore, all code, virtual environments and text  is made available as a Quarto book, rendered directly from the GitHub repository with GitHub Pages [ref]. To make this possible, the Quarto documentation has been extensively studied and discussed with *KMT* [ref, aknowledge]. 


## Initial Exploration with HiCExplorer

Here moves most of the text about HiCExplorer...

## Downloading Data and Project Structure

To reproduce the results from [@wang_reprogramming_2019], I chose to use their raw data directly from the SRA portal [ref]. I filtered the data to contain all their paired-end Hi-C reads, and included only macaque samples. The data set also contains RNAseq data, and the same tissues for both macaque and mouse. The meta data for the data set was extracted into a runtable `SRA-runtable.tsv`. To get an overview of the data accessions used in this analysis, we will first summarize the runtable  that contains the accession numbers and some metadata for each sample (@tbl-runtable-summary). It adds up to ~1Tb of compressed `fastq` files, holding ~9.5 billion reads, roughly evenly spread on the 5 tissue types.

\small
{{< embed ../notebooks/03_compartments.ipynb#tbl-runtable-summary >}}

\normalsize

## Handling coolers (Or: preparing coolers)

::: {#fig-flowchart-handling-coolers}

![](illustrations/placeholder2000x360.png)

A flowchart showing the pipeline from `.fastq` to `.mcool`. The first 6 steps were done with a Probably BioRender or Inkscape.
::: 

### The *gwf* workflow targets

A *gwf* workflow was created to handle the first part of the data processing, and each accesion number (read pair, mate pair) from the Hi-C sequencing was processed in parallel, so their execution was independent from each other. 

##### Downloading the reads

The reads were downloaded from NCBI SRA portal [ref] directly to GDK using `sra-downloader` [ref] through docker [ref] as `.fastq.gz` files. 


##### Handling the reference

The latest reference genome for rhesus macaque (*macaca mulata*), *rheMac10* (or *Mmul_10*, UCSC or NCBI naming conventions, respectively) was downloaded to GDK from UCSC web servers with `wget` [ref]. To use `bwa` (Burrow Wheeler's Aligner) [ref] for mapping, rheMac10 needs to be indexed with both `bwa index` with the `--bwtsw` option and `samtools faidx`, which results in six indexing files for `bwa mem` to use. 

Since [-@wang_reprogramming_2019], the reference genome for rhesus macaque has changed several times from *rheMac2* to *rheMac10*, each time resulting in a much less fragmented reference assembly. Part of the reasoning for reproducing their results was doing so on the latest assembly of the Macaca mulata genome, which arguably will result in a more accurate mapping of the reads, and a better inference of the chromatin compartments as well. 

Several mappers were used in different configurations (described in below), and `bowtie2` requires its own indexing of the reference, using `bowtie2-build --large-index`, which creates six index files for `bowtie2` to use. `--large-index` creates the special indexing format required for large genomes such as macaque.


##### Mapping Hi-C reads

paragraph will be restructured. 

The main difference between Hi-C libraries and standard paired-end libraries is the high fraction of chimeric reads in Hi-C. As a contact pair is crosslinked and ligated before sequencing, chimeric reads occur as a feature, and standard mapping techniques seeks to filter out this type of reads [ref]. Thus, we need specialized tools for rescuing chimeric reads. That said, we have to be cautious distinguishing the intended chimerism for Hi-C and that of technical artefacts. 

It was not feasible to follow the same approach as [@wang_reprogramming_2019] with either *HiCExplorer* or *Open2C*, as they use a third software, *HiC-Pro*. Hic-Pro uses bowtie2 in end-to-end mode, followed by remapping of 5'-ends of the unmapped reads to rescue chimeric fragments along with another approach. I mapped the reads using `bowtie2 --end-to-end` without the rescue-remapping, and it returned a very high fraction of discarded reads. I argue that even when trying to reproduce results, it is nonsensical to use methods that are not state-of-the-art. The HiC-Pro pipeline stops at a normalized contact map, and is thus not sufficient for downstream analysis. 

**HiCExplorer**  Initially, recommendations from HiCExplorer were used. According to their documentation [ref] it is crucial to 1) align reads locally, and 2) map mates separately. They recommend either of `bwa` or `bowtie2`, so I tested both with their recommended settings. `bowtie2` turned out to be a lot more resource-intensive and to produce almost no mapped reads [ref sup-fig-bowtie2-stats], so I suspect some settings was not set correctly. The mapped reads was converted to a Hi-C Matrix (`.h5`) with *HiCExplorers* `hicBuildMatrix`, which is extremely memory-intensive, using ~120 GB memory for the biggest matrix. I followed *HiCExplorer* pipeline to plot and explore the matrices created from this mapping. However, the work was laborious for experimentation, as, even though written in Python, `HicExplorer` only comes with a command-line interface and provided functions all write plots to files. I did not manage to make an efficient implementation for plotting the `.h5` files produced by the pipeline, as would be required for utilizing Jupyter Notebooks for customizing plots. I relatively quickly shifted to *Open2C* for their promises of the greener grass (a Python API). 

**Open2C**  Suspiciously, [@open2c] never mentions any problems with aligning the Hi-C reads, they just provide an example using `bwa mem` in paired-end mode and with the `-P` option set, which activates the Smith-Waterman [ref] algorithm to rescue missing hits, by focusing on assigning only of of the mates to a good mapping and escape mate-rescue.  The documentation of `bwa` [ref](https://bio-bwa.sourceforge.net) state that both bwa-mem and bwa-sw will rescue chimeric reads. Consequently, Open2C does not have a builtin way of pairing the reads after mapping, and I was left with two options: **1)** to re(-)pair the individually mapped read-mates (.bam)  with `samtools-fixmate` into one of the specific input formats required for `cooler` to create an interaction matrix *cooler*, or **2)** re-map the reads  using Open2C's recommendations and use their established pipeline for producing a cooler. I chose the latter, where I mapped the fastq files to *rheMac10* in paired end mode for a pair (m1, m2) with `bwa mem -SP rheMac10 m1 m2`.


##### Parse and sort the reads

**HiCExplorer** No action is needed, as this step is done implicitly when building the matrix

**Open2C** We need to convert the alignments into ligation events, and distinguish between several types of ligation events. The simplest event is when each side only maps to one unique segment in the genome 'UU'. Other events, where one or both sides map to multiple segments or the reads are long enough (>150bp) to contain two alignments (multiple ligations) have to be considered as well. Multiple ligations (walks) are treated according to the `--walks-policy` when parsing the alignments into valid pairs (or valid Hi-C contacts). Here, `mask` is the most conservative and masks all complex walks, whereas `5unique` reports the 5'-most unique alignment on each side. The pairs are piped directly into `pairtools sort` after parsing, as the deduplication step requires a sorted set of pairs. The *.pairs*-format produced by `pairtools` is an extension the [4DN Consortium](https://data.4dnucleome.org/file-formats/pairs/)-specified format, storing Hi-C pairs as in @tbl-pairsformat.

\small

::: {#tbl-pairsformat}


| Index | Name      | Description                                                             |
|------:|:----------|:------------------------------------------------------------------------|
| 1     | read_id   | the ID of the read as defined in fastq files                            |
| 2     | chrom1    | the chromosome of the alignment on side 1                               |
| 3     | pos1      | the 1-based genomic position of the outer-most (5’) mapped bp on side 1 |
| 4     | chrom2    | the chromosome of the alignment on side 2                               |
| 5     | pos2      | the 1-based genomic position of the outer-most (5’) mapped bp on side 2 |
| 6     | strand1   | the strand of the alignment on side 1                                   |
| 7     | strand2   | the strand of the alignment on side 2                                   |
| 8     | pair_type | the type of a Hi-C pair                                                 |
| 9     | mapq1     | mapq of the first mate                                                  |
| 10    | mapq2     | mapq of the second mate                                                 |

: Column specification of the .pairs format as extended by `pairtools`.

:::

\normalsize

I initially used `--walks-policy mask`, reasoning I had plenty of data points and could handle complex walks in a conservative way. Only later I realized the recommendations from *pairtools*, specifically informing that longer reads might have a significant proportion of reads that contain complex walks. With this in mind, I decided to re-parse the alignments into a new set of pairs, and equally apply the recommended filter (next section). As both results are saved, we can compare the two approaches. 


##### Filter (deduplicate) pairs

With *HiCExplorer*, no action is needed, as this step is done implicitly when building the matrix.

*pairtools* comes with a de-duplication function, `dedup`, to detect PCR duplication artefacts. At this point we will remove all reads that are mapped to an unplaced scaffold. Even though the publication of *rhemac10* assembly states they have closed 99% of the gaps since *rhemac8* [ref], *rheMac10* still contain more than 2,500 unplaced scaffolds, which are all uninformative when calculating the chromatin compartments as is the goal of this analysis. Therefore, we simply only include the list of conventional chromosomes (1..22, X, Y) when doing the deduplication. Initially, the default values were used to remove duplicates, where pairs with both sides mapped within 3 base pairs from each other are considered duplicates. 

`cooler` recommend to store the most comprehensive and unfilteres list of pairs, and then applying a filter on it on the fly by piping from `pairtools select`. I have missed this step, so I have not filtered for mapping quality. I will make a histogram showing the distribution of mapq scores to see the significance of this. 

##### Create interaction matrices (coolers) 

**HiCExplorer** `hicBuildMatrix` both parse and filter the mapped reads. The default value was used, alignments with $mapq < 15$ are discarded.

**Open2C** The final part of the *gwf* workflow takes `.pairs` as input and outputs a `.cool` file (*cooler*). Initially, we read directly from the newly generated deduplicated pairs without additional filtering, but here, the official recommendation is to filter out everything below $mapq = 30$ by piping the pairs through `pairtools select "(mapq1>=30) and (mapq2>=30)"` to `cooler cload pairs`. 

We should have plenty of data to do the filtering, but I argue it is not strictly necessary. I will show a histogram of the *mapq* scores to convince you [ref].

I have re-parsed the alignments and created new coolers, including only the Hi-C contacts where $mapq \leq 30$, following the current recommendations from `cooler`. 


### Notebook edits

As `cooler` and `cooltools` have a Python API, the more experimental parts of the analysis were moved to Jupyter Notebooks (still running on GenomeDK). `cooltools` comes with a helper library for operations on genomic intervals called `bioframe`. 

##### Pooling samples (Merging coolers)

The samples are grouped into *replicates* with a unique **BioSample** ID, but we chose to pool all the interaction matrices for each cell type. We argue that when @wang_reprogramming_2019 determine compartments to be highly reproducible between replicates, by merging the replicates we can get a more robust signal. 

`cooler merge` was used to merge all samples in each sub-folder (cell type) to just one interaction matrix for each cell type. The function merges matrices of the same dimensions by simply adding the interaction frequencies of each genomic position together, resulting in less empty positions by chance.

##### Create multi-resolution coolers (zoomify) 

A feature of working inside the ecosystem of *Open2C* [ref] is that it natively provides support for storing sparse interaction matrices in multiple resolutions in the same file by adding groups to the cooler [ref]. We can then efficiently store resolutions (i.e., different bin sizes) that is multiples of the smallest bin size. We chose to use 10kb, 50kb, 100kb, and 500kb bins, and the resolutions are made by recursively binning the base resolution. We call this process zoomifying. 

##### Matrix balancing (Iterative correction) 

Finally, we balance the matrices using the cooler CLI. We use `cooler balance` with the default options which iteratively balances the matrix (Iterative Correction). It is first described as a method for bias correction of Hi-C matrices in [@imakaev_iterative_2012], where it is paired with eigenvector decomposition, coining the combined analysis **ICE**. Here, the eigenvector decomposition of the obtained maps is experimentally validated to provide insights into local chromatin states. 

[According to `cooler` documentation] We have to balance the matrices on each resolution, and thus it cannot be done prior to zoomifying. They state that the balancing weights are resolution-specific and will no longer retain its biological meaning when binned with other weights. Therefore, we apply `cooler balance` to each resolution separately. `cooler balance` will create a new column in the `bins` group of each cooler , `weight`, which can then be included or not in the downstream analysis. This means we will have access to both the balanced and the unbalanced matrix.
         
The default mode uses genome-wide data to calculate the weights for each bin. It would maybe be more suitable to calculate the weights for *cis* contacts only, and that is possible through the `--cis-only` flag, and that can be added to another column, so that we can compare the difference between the two methods easily. However, we will only use the default mode for now. 

##### Eigendecomposition

The eigendecomposition of a Hi-C interaction matrix is performed in multiple steps. As value of the eigenvector is only *significant* up to a sign, it is convention [ref] to use GC content as a phasing track to orient the vector. E1 is arbitrarily defined to be positively correlated with GC content, meaning a positive E1 value signifies an active chromatin state, which we denote a A-type compartment (or simply A-compartment). We performed eigendecomposition of two resolutions, 100 Kbp and 500 Kbp. 

First, we calculate the GC content of each bin of the reference genome, *rheMac10*, which is binned to the resolution of the Hi-C matrix we are handling. It is done with `bioframe.frac_gc` (*Open2C*). To calculate the E1 compartments, we use only within-chromosome contacts (*cis*), as we are not interested in the genome-wide contacts. `cooltools.eigs_cis` will decorrelate the contact-frequency by distance before performing the eigendecomposition. `eigs_cis` needs a *viewframe* (view) to calculate E1 values, the simplest view being the full chromosome. However, when there is more variance between chromosome arms than within arms, the sign of the first eigenvector will be determined largely by the chromosome arm it sits on, and not by the chromatin compartments. To mitigate this, we apply a chromosome-arm-partitioned view of the chromosome (as a bedlike format, described in `bioframe` docs [ref]). 

Additionally, to mimic the *Local PCA* from [@wang_reprogramming_2019], I also defined a view of 10 Mb bins. 

##### Plotting

*HiCExplorer* plots matrices to .png from the command-line. 

We use matplotlib and seaborn to plot in the *Open2C* framework. Utilizing the `cooler` class, we can fetch regions of the matrix without modifying the file. As my analysis is centered around the X chromosome, it is efficiently handled by simply fetching 'chrX' with `cooler.Cooler.matrix().fetch('chrX')`. 

Many methods of the cooler class returns data selectors, which do not retrieve data before it is queried [ref]. This means we can create many selectors at once without overflowing memory, enabling us to plot multiple interaction matrices in the same plot, e.g. the corrected and un-corrected matrices. This is easily done with the `balance` parameter of the matrix selector (`.matrix()`), which determines if it should apply the balancing weights to the coordinates and defaults to `True`. 


{{< pagebreak >}}

# Results

## Exploration with HicExplorer 




{{< pagebreak >}}

# Discussion

Here is the discussion

{{< pagebreak >}}

# Bibliography {.unnumbered}

\begingroup
\raggedright
::: {#refs}
:::
\endgroup

